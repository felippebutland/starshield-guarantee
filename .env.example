# =================================
# StarShield Guarantee - Environment Variables
# =================================
# Copy this file to .env and update the values according to your setup

# =================================
# APPLICATION CONFIGURATION
# =================================
NODE_ENV=production
PORT=3000
FRONTEND_URL=http://localhost:3001

# =================================
# MONGODB CONFIGURATION
# =================================
# MongoDB Connection (automatically configured for Docker)
DATABASE_URL=mongodb://admin:password123@mongodb:27017/starshield-guarantee?authSource=admin

# MongoDB Docker Configuration
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=password123
MONGO_DB_NAME=starshield-guarantee

# =================================
# EMAIL CONFIGURATION
# =================================
# Gmail API Configuration (Recommended for production)
# Follow: https://developers.google.com/gmail/api/quickstart
GMAIL_CLIENT_ID=your_gmail_client_id_here
GMAIL_CLIENT_SECRET=your_gmail_client_secret_here
GMAIL_REFRESH_TOKEN=your_gmail_refresh_token_here
GMAIL_USER=your_email@gmail.com

# SMTP Fallback Configuration
# Used when Gmail API fails or is not configured
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password_here

# =================================
# SECURITY NOTES
# =================================
# 1. Never commit the actual .env file to version control
# 2. Use strong passwords for MongoDB in production
# 3. For Gmail API, create OAuth2 credentials in Google Cloud Console
# 4. For SMTP, use App Passwords, not your regular Gmail password
# 5. Restrict MongoDB access in production environments

# =================================
# DOCKER COMPOSE USAGE
# =================================
# 1. Copy this file: cp .env.example .env
# 2. Update the values above according to your needs
# 3. Run: docker-compose up -d
# 4. Check logs: docker-compose logs -f app
# 5. Stop services: docker-compose down